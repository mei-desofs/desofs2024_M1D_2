package com.isep.desofs.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAllPropertiesEquals(User expected, User actual) {
        assertUserAutoGeneratedPropertiesEquals(expected, actual);
        assertUserAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAllUpdatablePropertiesEquals(User expected, User actual) {
        assertUserUpdatableFieldsEquals(expected, actual);
        assertUserUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAutoGeneratedPropertiesEquals(User expected, User actual) {
        assertThat(expected)
            .as("Verify User auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserUpdatableFieldsEquals(User expected, User actual) {
        assertThat(expected)
            .as("Verify User relevant properties")
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(e -> assertThat(e.getContact()).as("check contact").isEqualTo(actual.getContact()))
            .satisfies(e -> assertThat(e.getProfilePhoto()).as("check profilePhoto").isEqualTo(actual.getProfilePhoto()))
            .satisfies(
                e ->
                    assertThat(e.getProfilePhotoContentType())
                        .as("check profilePhoto contenty type")
                        .isEqualTo(actual.getProfilePhotoContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserUpdatableRelationshipsEquals(User expected, User actual) {
        assertThat(expected)
            .as("Verify User relationships")
            .satisfies(e -> assertThat(e.getPortfolio()).as("check portfolio").isEqualTo(actual.getPortfolio()));
    }
}
